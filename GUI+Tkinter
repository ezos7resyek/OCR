import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import time, os, random, string, argparse
from pathlib import Path
import numpy as np
from PIL import ImageTk, Image
import cv2
import tensorflow as tf
from keras.preprocessing.image import img_to_array

model = tf.keras.models.load_model("CharRecog.h5")
print("Model loaded successsfully")



class Page(tk.Tk):

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.title("OCR")

        container = tk.Frame(self)
        container.grid()



        # title
        self.name = tk.Label(self, text="Character Recognition", font=("Arial", 16))
        self.name.grid(row=0, column=0, pady=5, padx=10, sticky="sw")

        # intro
        self.intro = tk.Label(self,
                                  text="Demonstration of using Python in a desktop application for Character Recognition.",
                                  font=("Arial", 11), fg="#202020")
        self.intro.grid(row=1, column=0, columnspan=3, padx=10, pady=10, sticky="nw")

        # select image                          
        self.browse_lbl = tk.Label(self, text="Select Image :", font=("Arial", 10), fg="#202020")
        self.browse_lbl.grid(row=4, column=0, columnspan=3, padx=24, pady=10, sticky="w")

        self.browse_entry = tk.Entry(self, text="", width=30)
        self.browse_entry.grid(row=4, column=0, columnspan=3, padx=120, pady=10, sticky="w")

        self.browse_btn = tk.Button(self, text="     Browse     ", bg="#ffffff", relief="flat", width=10,
                                    command=lambda: self.show_image())
        self.browse_btn.grid(row=4, column=0, padx=310, pady=10, columnspan=3, sticky="w")

        # file info
        self.lbl_filename = tk.Label(self, text="File Name: ", font=("Arial", 10), fg="#202020")

        self.label_text_x = tk.StringVar()
        self.lbl_filename_01 = tk.Label(self, textvariable=self.label_text_x, font=("Arial", 10), fg="#202020")

        # place holder for document thumbnail
        self.lbl_image = tk.Label(self, image="")
        self.lbl_image.grid(row=8, column=0, pady=25, padx=10, columnspan=3, sticky="nw")

        # status text
        self.label_text_progress = tk.StringVar()
        self.scan_progress = tk.Label(self, textvariable=self.label_text_progress, font=("Arial", 10), fg="#0000ff")

        # scan button
        self.scan_btn = tk.Button(self, text="     Process     ", bg="#ffffff", relief="flat",
                                  width=10, command=lambda: self.model())
        # clear ocr text button
        self.clear_btn = tk.Button(self, text="     Clear      ", bg="#ffffff", relief="flat",
                                   width=10, command=lambda: self.clearOcr())
        # text area to place text

        #self.ocr_text = tk.Text(self, height=25, width=38, font=("Arial", 10), fg='black', state='disabled')
        self.label3 = tk.Label(self, text='',  height=25, width=38, font=("Arial", 10), bg='white', fg='black', wraplength=200, justify='center')
        self.label3.place(relx=0.5, rely=0.25, relheight=0.45, relwidth=0.42)


        # add text to end of textbox


    def show_image(self):
        global path

        # open file dialog
        self.path = filedialog.askopenfilename(defaultextension="*.jpg", filetypes=(("JPG", "*.jpg"), ("PNG", "*.png")))
        self.browse_entry.delete(0, tk.END)
        self.browse_entry.insert(0, self.path)

        self.label_text_progress.set("Image loaded - ready to be processed.");
        self.scan_progress.grid(row=18, column=0, padx=10, pady=0,
                                columnspan=3, sticky="w")

        # resize image
        cv_img = cv2.cvtColor(cv2.imread(self.path), cv2.COLOR_BGR2RGB)
        height, width, no_channels = cv_img.shape

        HEIGHT = 400
        WIDTH = 300
        imgScale = HEIGHT / height
        imgScale = WIDTH / width
        newX, newY = cv_img.shape[1] * imgScale, cv_img.shape[0] * imgScale
        newimg = cv2.resize(cv_img, (int(newX), int(newY)))
        photo = ImageTk.PhotoImage(image=Image.fromarray(newimg))

        # show image
        self.lbl_image.configure(image=photo)
        self.lbl_image.image = photo

        # show file information
        self.lbl_filename.grid(row=5, column=0, pady=0, padx=10, columnspan=3, sticky="nw")
        self.lbl_filename_01.grid(row=5, column=0, pady=0, padx=85, columnspan=3, sticky="nw")

        # add scan button
        scan_btn_mid = int(newX / 2) - 40;
        self.scan_btn.grid(row=17, column=0, padx=scan_btn_mid, pady=10,
                           columnspan=3, sticky="w")


        # set the filename
        self.label_text_x.set(os.path.basename(self.path))


    def model(self):
        self.label_text_progress.set("Image processing complete.");

        dict={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V''W','X','Y','Z','a','b','c','d','e','f',
              'g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}
        self.ocr_image = cv2.imread(self.path)
        gray = cv2.cvtColor(self.ocr_image, cv2.COLOR_RGB2GRAY)
        blur = cv2.GaussianBlur(gray, (5, 5), 0)
        thresh = cv2.adaptiveThreshold(blur, 255, 1, 1, 11, 2)
        contours, hierachy = cv2.findContours(thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
        a=[]
        i = 0
        for cnt in contours:
            if cv2.contourArea(cnt) > 10:
                x, y, w, h = cv2.boundingRect(cnt)
                if (w < 45) and (h > 2):
                    # cv2.rectangle(img,(x-4,y-4),(x+w+4,y+h+4),(255,255,255), 1)
                    cv2.rectangle(thresh, (x, y), (x + w + 1, y + h + 1), (255, 255, 255), 1)
                    # save individual images
                    crop_img = thresh[y:y + h + 1, x:x + w + 1]
                    crop_img = cv2.resize(crop_img, (32,32))
                    x = img_to_array(crop_img)

                    x = x.reshape(1, 32, 32, 1)
                    x=x/255.0
                    result = model.predict(x)[0]
                    a.append(np.argmax(result))

                    i = i + 1
                    ''''

                    
                 
                    '''


        '''         #before resizing image should be square -> resize to 32,32
        
        '''
        self.label3.config(text=a)

        self.clear_btn.grid(row=17, column=0, padx=440, pady=10,
                            columnspan=3, sticky="w")




    def clearOcr(self):
        # clear the textbox
        self.label3.after(self.label3.master.destroy)


if __name__ == "__main__":
    app = Page()
    app.geometry("700x725+100+100")
    app.mainloop()
